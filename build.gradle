import com.wiredforcode.gradle.spawn.SpawnProcessTask
import com.wiredforcode.gradle.spawn.KillProcessTask

apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'
apply plugin: 'com.wiredforcode.spawn'

buildscript {
    dependencies {
       repositories {
           mavenCentral()
           jcenter()
       }

       classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
       classpath 'com.wiredforcode:gradle-spawn-plugin:0.6.0'
   }
}
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

project.ext {
    runInMemory = true
    configPath = "$rootProject.projectDir/config/"
}


shadowJar {
    archiveName = 'socialeggbox-ws.jar'
    classifier = ''
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    manifest { attributes 'Main-Class': 'application.SocialEggboxApplication' }
}

configurations {
    outputDirs

    compile.extendsFrom common

  //  testCompile.extendsFrom commonTest

//    bddtestCompile.extendsFrom compile

//    bddtestRuntime.extendsFrom runtime, bddtestCompile


  bddtestCompile.extendsFrom compile
  bddtestRuntime.extendsFrom runtime, bddtestCompile

  bddtestUsageCompile.extendsFrom bddtestCompile, outputDirs
  bddtestUsageRuntime.extendsFrom bddtestRuntime

  // Assume that the project wants to use the fixtures for its tests
  testCompile.extendsFrom bddtestUsageCompile
  testRuntime.extendsFrom bddtestUsageRuntime
}

sourceSets {

  main {
    java { srcDirs }
  }
  test {
    java { srcDirs }
  }

  bddtest {
      compileClasspath = sourceSets.main.output + configurations.bddtestCompile
      runtimeClasspath = output + compileClasspath + configurations.bddtestRuntime
      java { srcDirs = ['src/bddtest/java']}
      resources { srcDirs = ['src/bddtest/resources']}
  }

}

repositories {
  mavenCentral()
  jcenter()

}


dependencies {
   compile 'io.dropwizard:dropwizard-core:0.9.1'
   compile group: 'io.dropwizard',           name: 'dropwizard-jdbi',            version: '0.8.1'
   compile group: 'de.thomaskrille',         name: 'dropwizard-template-config', version: '1.1.0'
   compile 'org.jdbi:jdbi:2.73'
   compile group: 'com.h2database', name: 'h2', version: '1.4.192'
   compile  group:  'mysql',                  name: 'mysql-connector-java', version: '5.1.34'
   compile  group:  'org.flywaydb',           name: 'flyway-core',          version: '3.1'
   compile 'com.fasterxml.jackson.core:jackson-core:2.7.0'
   compile 'com.fasterxml.jackson.core:jackson-annotations:2.7.0'
   compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.7.0'
   compile 'com.fasterxml.jackson.core:jackson-databind:2.7.0'
   compile group: 'org.json', name: 'json', version: '20160810'


   //compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
   compile 'joda-time:joda-time:2.7'

   testCompile 'junit:junit-dep:4.11'
   testCompile group: 'org.assertj',                       name: 'assertj-core',               version: '3.0.0', changing: true
   testCompile 'com.fasterxml.jackson.core:jackson-core:2.7.0'
   testCompile 'com.fasterxml.jackson.core:jackson-annotations:2.7.0'
   testCompile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'

   bddtestCompile 'info.cukes:cucumber-java:1.2.0'
   bddtestCompile 'info.cukes:cucumber-junit:1.2.0'
   bddtestCompile  group: 'io.dropwizard',                     name: 'dropwizard-testing',         version: '0.8.1'
   bddtestCompile	group: 'org.apache.httpcomponents',			name: 'httpclient',					version: '4.2.3'
   bddtestCompile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.3.5'

}

task startServer(type: SpawnProcessTask) {
    dependsOn shadowJar
    run
    command 'java -jar build/libs/socialeggbox-ws.jar server config/socialeggbox.yml'
    ready 'org.eclipse.jetty.server.Server: Started'
}

task stopServer(type: KillProcessTask)

task cucumber(type: JavaExec){
    dependsOn startServer
    finalizedBy stopServer
    main = "cucumber.api.cli.Main"
    classpath = configurations.bddtestRuntime + sourceSets.main.output + sourceSets.bddtest.output
    jvmArgs = [
            "-DserverUrl=${hostname()}:9000",
            "-DrunInMemory=${runInMemory}"
    ]
        def tempArgs = []
        tempArgs.addAll('-p', 'pretty', '-p', 'json:build/reports/cucumberResults.json')
        tempArgs.addAll('--glue', 'uk.co.socialeggbox.stepdefs')
        tempArgs.add('src/bddtest/resources')
        if (project.hasProperty('cucumberTags')) {
	       String[] tags = project.property('cucumberTags').split(',')
               for (tag in tags) {
	               tempArgs.addAll(['--tags    ', tag]);
	       }
        }
        println("args=" + "${tempArgs}")
        args = tempArgs
}


def hostname() {
    def docker_host = "$System.env.DOCKER_HOST"

    if (is_blank(docker_host)) {
        return "http://localhost"
    }

    return strip_port(docker_host.replaceAll("tcp", "http"))
}

def is_blank(hostname) {
    return hostname == "null" || "".equals(hostname)
}

def strip_port(hostname) {
    def port_index = hostname.lastIndexOf(":")
    return hostname.substring(0, port_index)
}

task copyResources(type: Copy) {
    from sourceSets.bddtest.resources
    from sourceSets.main.resources
    into "$buildDir/resources/bddtest"
}

/*
idea {

    module{
        name = 'socialeggbox-webservice'

        testSourceDirs += file('src/bddtest/java')

        scopes.TEST.plus += [ configurations.bddtestCompile ]
        scopes.COMPILE.plus += [configurations.bddtestCompile]
    }
 }

*/

mainClassName = "application.SocialEggboxApplication"


// Configure the run task to start the Dropwizard service
run {
    args 'server', configPath + 'socialeggbox.yml'
}

run.dependsOn shadowJar
